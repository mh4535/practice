SET_ONE = 1
SET_TWO = -1
NO_PARENT = -1
OPPOSITE = -1
SET_ASSIGNMENTS_ARE_VALID = True

class Solution:  

    def are_set_assignments_from_this_node_valid(self, graph, set_assignments, node, parent):

        #Base case
        if node in set_assignments and parent in set_assignments:
            set_assignments_are_valid = set_assignments[node] != set_assignments[parent]
            return set_assignments_are_valid  

        #Process node
        if node not in set_assignments and parent == NO_PARENT:
            set_assignments[node] = SET_ONE

        if node not in set_assignments:
            set_assignments[node] = set_assignments[parent] * OPPOSITE 

        #Recurse on neighbors
        neighbors = graph[node]
        for neighbor in neighbors:            

            set_assignments_are_valid = self.are_set_assignments_from_this_node_valid(graph, set_assignments, neighbor, node)

            if not set_assignments_are_valid:
                return False 
        
        return SET_ASSIGNMENTS_ARE_VALID

            

    def isBipartite(self, graph: List[List[int]]) -> bool:

        set_assignments = {}
        num_nodes = len(graph)

        for node in range(num_nodes):

            are_set_assignments_valid = self.are_set_assignments_from_this_node_valid(graph, set_assignments, node, NO_PARENT)
            
            if not are_set_assignments_valid:
                return False
        
        return SET_ASSIGNMENTS_ARE_VALID